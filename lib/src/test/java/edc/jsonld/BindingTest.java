/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edc.jsonld;

import com.apicatalog.jsonld.JsonLd;
import com.apicatalog.jsonld.JsonLdError;
import com.apicatalog.jsonld.JsonLdOptions;
import com.apicatalog.jsonld.document.JsonDocument;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.datatype.jsonp.JSONPModule;
import edc.EdcException;
import edc.jsonld.model.Catalog;
import edc.jsonld.model.Dataset;
import edc.jsonld.transformer.JsonLdTransformerRegistryImpl;
import edc.jsonld.transformer.from.FromCatalogTransformer;
import edc.jsonld.transformer.from.FromContractOfferTransformer;
import edc.jsonld.transformer.from.FromPolicyTransformer;
import edc.jsonld.transformer.to.ToCatalogTransformer;
import edc.jsonld.transformer.to.ToContractOfferTransformer;
import edc.jsonld.transformer.to.ToDataServiceTransformer;
import edc.jsonld.transformer.to.ToGenericTypeTransformer;
import edc.model.policy.model.AtomicConstraint;
import edc.model.policy.model.LiteralExpression;
import edc.model.policy.model.Permission;
import edc.model.policy.model.Policy;
import jakarta.json.Json;
import jakarta.json.JsonBuilderFactory;
import jakarta.json.JsonObject;
import org.jetbrains.annotations.NotNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import static edc.jsonld.transformer.Namespaces.DCAT_PREFIX;
import static edc.jsonld.transformer.Namespaces.DCAT_SCHEMA;
import static edc.jsonld.transformer.Namespaces.ODRL_PREFIX;
import static edc.jsonld.transformer.Namespaces.ODRL_SCHEMA;

class BindingTest {
    public static final String FOO_NAMESPACE = "https://foo.com/schema.json/";

    private ObjectMapper mapper;
    private JsonLdTransformerRegistryImpl registry;
    private JsonBuilderFactory builderFactory;

    @Test
    public void toCatalog() throws Exception {
        var json = mapper.readValue(getClass().getClassLoader().getResource("catalog.message.json"), JsonObject.class);

        var expanded = JsonLd.expand(JsonDocument.of(json)).options(new JsonLdOptions((url, options) -> createDefaultDocumentLoader())).get();
        var result = registry.transform(expanded.getJsonObject(0), Catalog.class);
    }

    @Test
    public void fromCatalog() throws Exception {
        var catalog = Catalog.Builder.newInstance()
                .dataset(Dataset.Builder.newInstance().id(UUID.randomUUID().toString()).offer(createPolicy()).build())
                .dataset(Dataset.Builder.newInstance().id(UUID.randomUUID().toString()).offer(Policy.Builder.newInstance().build()).build())
                .property(FOO_NAMESPACE + "fooprop", "fooval")
                .property(FOO_NAMESPACE + "bazprop", "bazval")
                .build();

        var result = registry.transform(catalog, JsonObject.class);

        var jsonObject = result.getContent();

        var document = JsonDocument.of(jsonObject);
        var contextObject = builderFactory.createObjectBuilder()
                .add(DCAT_PREFIX, DCAT_SCHEMA)
                .add(ODRL_PREFIX, ODRL_SCHEMA)
                .build();
        var contextDocument = JsonDocument.of(builderFactory.createObjectBuilder().add("@context", contextObject).build());

        var compacted = JsonLd.compact(document, contextDocument).get();
    }

    @Test
    void compactAndWriteCatalog() throws Exception {
        var catalog = mapper.readValue(getClass().getClassLoader().getResource("catalog.message.json"), Object.class);
        var jsonObject = mapper.convertValue(catalog, JsonObject.class);
        var document = JsonDocument.of(jsonObject);
        var compacted = JsonLd.compact(document, document).get();
    }

    @Test
    void serializeObject() throws JsonProcessingException {
        var objectBuilder = builderFactory.createObjectBuilder();
        var object = objectBuilder.add("foo", "bar").build();
        var result = mapper.writeValueAsString(object);
    }

    @BeforeEach
    void setUp() {
        mapper = new ObjectMapper();
        mapper.registerModule(new JSONPModule());
        var module = new SimpleModule() {
            @Override
            public void setupModule(SetupContext context) {
                super.setupModule(context);
            }
        };
        mapper.registerModule(module);
        mapper.registerSubtypes(AtomicConstraint.class, LiteralExpression.class);

        registry = new JsonLdTransformerRegistryImpl();

        var toGenericTypeTransformer = new ToGenericTypeTransformer(mapper);
        registry.register(toGenericTypeTransformer);

        var toCatalogTransformer = new ToCatalogTransformer();
        registry.register(toCatalogTransformer);

        var toContractOfferTransformer = new ToContractOfferTransformer();
        registry.register(toContractOfferTransformer);

        var toDataServiceTransformer = new ToDataServiceTransformer();
        registry.register(toDataServiceTransformer);

        builderFactory = Json.createBuilderFactory(Map.of());

        var fromCatalogTransformer = new FromCatalogTransformer(builderFactory, mapper);
        registry.register(fromCatalogTransformer);

        var fromContractOfferTransformer = new FromContractOfferTransformer(builderFactory);
        registry.register(fromContractOfferTransformer);

        var fromPolicyTransformer = new FromPolicyTransformer(builderFactory, mapper);
        registry.register(fromPolicyTransformer);
    }

    private static Policy createPolicy() {
        var atomicConstraint = AtomicConstraint.Builder.newInstance()
                .leftExpression(new LiteralExpression("Use"))
                .rightExpression(new LiteralExpression(true))
                .build();
        return Policy.Builder.newInstance()
                .permissions(List.of(Permission.Builder.newInstance().constraint(atomicConstraint).build()))
                .build();
    }

    @NotNull
    private JsonDocument createDefaultDocumentLoader() throws JsonLdError {
        try {
            return JsonDocument.of(getClass().getClassLoader().getResource("ids.context.json").openStream());
        } catch (IOException e) {
            throw new EdcException(e);
        }
    }


}


